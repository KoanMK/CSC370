-- Nigel Decontie
-- V00853112

drop table if exists students cascade;
CREATE TABLE public.students (
	student_id varchar(9) Not null check (length(student_id)=9),
	"name" varchar(255) NULL,
	PRIMARY KEY (student_id)
);

drop table if exists instructors cascade;
CREATE TABLE public.instructors (
	"name" varchar(255) null,
	primary key (name)
);

drop table if exists term cascade;
CREATE TABLE public.term (
	term_code int null,
	primary key (term_code)
);

drop table if exists courses cascade;
CREATE TABLE public.courses (
	"code" varchar(30) null check (length(code)>0),
	primary key (code)
);

drop table if exists course_offerings cascade;
CREATE TABLE public.course_offerings (
	code varchar(30) null,
	term_code int null check (term_code>=0),
	capacity int null check (capacity >= 0),
	instructor_name varchar(255) not NULL,
	"name" varchar(36) unique check (length(name) > 0),
	primary key (code, term_code),
	CONSTRAINT course_offerings_courses_fk FOREIGN KEY (code) REFERENCES public.courses(code) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT course_offerings_term_fk FOREIGN KEY (term_code) REFERENCES public.term(term_code) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT course_offerings_instructors_fk FOREIGN KEY (instructor_name) REFERENCES public.instructors("name") ON DELETE RESTRICT ON UPDATE RESTRICT
);

drop table if exists enrollment cascade;
CREATE TABLE public.enrollment (
	student_id varchar(9) NULL,
	code varchar(30) NULL,
	term_code int null check (term_code >= 0),
	grade int null check (grade < 101) check (grade >= 0),
	primary key (student_id, code, term_code),
	CONSTRAINT enrollment_students_fk FOREIGN KEY (student_id) REFERENCES public.students(student_id) ON DELETE cascade ON UPDATE cascade,
	CONSTRAINT enrollment_ids_fk FOREIGN KEY (code, term_code) REFERENCES public.course_offerings(code, term_code) ON DELETE cascade ON UPDATE cascade
);

drop table if exists prerequisites cascade;
CREATE TABLE public.prerequisites (
	prereq_id serial,
	prerequisite varchar(30) NULL,
	course_code varchar(30) NULL,
	term_code int null check (term_code >= 0),
	primary key (prereq_id),
	CONSTRAINT prerequisites_courses_fk FOREIGN KEY (prerequisite) REFERENCES public.courses(code) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT prerequisites_course_offerings_fk FOREIGN KEY (course_code,term_code) REFERENCES public.course_offerings(code,term_code) ON DELETE RESTRICT ON UPDATE RESTRICT
);

--TRIGGERS
drop function if exists capacity_trigger();
create function capacity_trigger() returns trigger as
$BODY$
begin
	if (select count(student_id) from enrollment 
		where code = new.code and term_code = new.term_code) 
		>= (select capacity from course_offerings
		where code = new.code and term_code = new.term_code)
	then
		raise exception 'Course at maximum capacity.';
	end if;
	return new;
end 
$BODY$
language plpgsql;

drop function if exists prereq_trigger();
create function prereq_trigger() returns trigger as
$BODY$
begin
	if
		(
			with passes as (
				with
					T1 as (select * 
							from prerequisites 
							where course_code=new.code and term_code=new.term_code)
				select max(grade), code
				from enrollment 
					inner join T1 on code = prerequisite
				where code = T1.prerequisite 
						and new.term_code > enrollment.term_code
						and student_id = new.student_id 
						and (grade > 49 or grade is NULL)
				group by code)
			select count(*) from passes
		) <> (
			select count(*) 
			from prerequisites 
			where course_code=new.code and term_code=new.term_code
		)
	then
		raise exception 'Prerequisites not met.';
	end if;
	return new;
end 
$BODY$
language plpgsql;

drop function if exists drop_trigger();
create function drop_trigger() returns trigger as
$BODY$
begin
	if old.grade is not NULL
	then
		raise exception 'Cannot drop course; grade already assigned.';
	end if;
	return old;
end
$BODY$
language plpgsql;

--EXECUTE TRIGGERS
create trigger check_capacity
	before insert on enrollment
	for each row
	execute procedure capacity_trigger();

create trigger check_prereq
	before insert on enrollment
	for each row
	execute procedure prereq_trigger();

create trigger check_grade
	before delete on enrollment
	for each row
	execute procedure drop_trigger();



